{"version":3,"file":"static/js/660.a0cd065a.chunk.js","mappings":"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","sources":["components/Community/NewDiscussion.jsx"],"sourcesContent":["import React, { useContext, useEffect, useState } from \"react\";\r\nimport { CategoriesData } from \"../../dataJson/CategoriesData\";\r\n// import axios from \"axios\";\r\nimport { BASE_URL } from \"../../config/mongo\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { AuthContext } from \"../../context/AuthContext\";\r\nimport axios from \"axios\";\r\nfunction NewDiscussion() {\r\n  const { currentUser } = useContext(AuthContext);\r\n\r\n  const [title, setTitle] = useState(\"\");\r\n  const [description, setDescription] = useState(\"\");\r\n  const [category, setCategory] = useState(\"\");\r\n  const [userId, setUserID] = useState(\"\");\r\n  //const axios = require(\"axios\");\r\n\r\n  // async function checkMoralImplications(inputText) {\r\n  //   const apiKey = \"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\";\r\n  //   const apiUrl =\r\n  //     \"https://api.openai.com/v1/engines/davinci-codex/completions\";\r\n\r\n  //   try {\r\n  //     const response = await axios.post(\r\n  //       apiUrl,\r\n  //       {\r\n  //         prompt: `Is the following text morally acceptable? \"${inputText}\"`,\r\n  //         max_tokens: 1,\r\n  //       },\r\n  //       {\r\n  //         headers: {\r\n  //           Authorization: `Bearer ${apiKey}`,\r\n  //           \"Content-Type\": \"application/json\",\r\n  //         },\r\n  //       }\r\n  //     );\r\n\r\n  //     const completion = response.data.choices[0].text.trim();\r\n  //     return completion === \"Yes\";\r\n  //   } catch (error) {\r\n  //     console.error(\"Error:\", error);\r\n  //     return null;\r\n  //   }\r\n  // }\r\n\r\n  useEffect(() => {\r\n    setUserID(currentUser?.uid);\r\n  }, [currentUser]);\r\n  const createDiscussion = async () => {\r\n    const response = await axios.post(`${BASE_URL}/create-discussion`, {\r\n      userId,\r\n      title,\r\n      description,\r\n      category,\r\n    });\r\n    // Handle successful response\r\n    console.log(\"Discussion Created successfully:\", response.data);\r\n    navigate(\"/community\");\r\n  };\r\n  const navigate = useNavigate();\r\n  const handleCreateDiscussion = async (e) => {\r\n    e.preventDefault();\r\n\r\n    if (!title || !description || !category || !userId) {\r\n      console.error(\"Missing required fields\");\r\n      console.log(title, description, category, userId);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      console.log(title, description, category, userId);\r\n\r\n      // const inputText = { description };\r\n      // checkMoralImplications(inputText).then((result) => {\r\n      //   if (result === null) {\r\n      //     alert(\"The result is null.\");\r\n      //   } else if (result) {\r\n      //     console.log(\"The text is morally acceptable.\");\r\n         createDiscussion();\r\n      //   } else {\r\n      //     alert(\"The text is morally unacceptable.\");\r\n      //   }\r\n      // });\r\n\r\n      // You can perform additional actions here, such as displaying a success message or redirecting to another page\r\n    } catch (error) {\r\n      // Handle error\r\n      console.error(\"Error creating discussion:\", error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"flex flex-col items-center justify-center min-h-screen bg-black\">\r\n      <div className=\"w-full max-w-sm p-6 bg-gray-800 rounded shadow-md\">\r\n        <h2 className=\"text-2xl font-semibold text-white text-center mb-4\">\r\n          Create New Discussion\r\n        </h2>\r\n        <form onSubmit={handleCreateDiscussion}>\r\n          <div className=\"mb-4\">\r\n            <label\r\n              htmlFor=\"title\"\r\n              className=\"block text-gray-300 text-sm font-bold mb-2\"\r\n            >\r\n              Title\r\n            </label>\r\n            <input\r\n              type=\"text\"\r\n              id=\"title\"\r\n              name=\"Title\"\r\n              className=\"w-full px-3 py-2 border rounded bg-gray-700 text-white focus:outline-none focus:border-blue-500\"\r\n              value={title}\r\n              onChange={(e) => setTitle(e.target.value)}\r\n              required\r\n            />\r\n          </div>\r\n          <div className=\"mb-4\">\r\n            <label\r\n              htmlFor=\"description\"\r\n              className=\"block text-gray-300 text-sm font-bold mb-2\"\r\n            >\r\n              Description\r\n            </label>\r\n            <textarea\r\n              id=\"description\"\r\n              name=\"Description\"\r\n              rows=\"3\"\r\n              className=\"w-full px-3 py-2 border rounded bg-gray-700 text-white focus:outline-none focus:border-blue-500\"\r\n              value={description}\r\n              onChange={(e) => setDescription(e.target.value)}\r\n              required\r\n            ></textarea>\r\n          </div>\r\n          <div className=\"mb-4\">\r\n            <label\r\n              htmlFor=\"Category\"\r\n              className=\"block text-gray-300 text-sm font-bold mb-2\"\r\n            >\r\n              Category\r\n            </label>\r\n            <select\r\n              name=\"Category\"\r\n              value={category}\r\n              onChange={(e) => setCategory(e.target.value)}\r\n            >\r\n              <option disabled selected>\r\n                - Select a Category -\r\n              </option>\r\n              {CategoriesData?.map((group) => (\r\n                <option value={group.groupName}>{group.groupName}</option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n\r\n          <div className=\"flex justify-center mt-10\">\r\n            <button\r\n              type=\"submit\"\r\n              className=\"bg-orange-500 hover:bg-orange-600 text-white font-bold py-2 px-4 rounded focus:outline-none\"\r\n            >\r\n              Create\r\n            </button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default NewDiscussion;\r\n"],"names":["currentUser","useContext","AuthContext","_useState","useState","_useState2","_slicedToArray","title","setTitle","_useState3","_useState4","description","setDescription","_useState5","_useState6","category","setCategory","_useState7","_useState8","userId","setUserID","useEffect","uid","createDiscussion","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","response","wrap","_context","prev","next","axios","concat","BASE_URL","sent","console","log","data","navigate","stop","apply","arguments","useNavigate","handleCreateDiscussion","_ref2","_callee2","e","_context2","preventDefault","error","abrupt","_x","_jsx","className","children","_jsxs","onSubmit","htmlFor","type","id","name","value","onChange","target","required","rows","disabled","selected","CategoriesData","group","groupName"],"sourceRoot":""}